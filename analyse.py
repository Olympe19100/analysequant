import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.stattools import adfuller, grangercausalitytests, coint
from sklearn.feature_selection import mutual_info_regression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
import plotly.graph_objects as go
import streamlit as st
import statsmodels.api as sm  # Assurez-vous que cette ligne est pr√©sente en Ahaut de votre code
import scipy.stats as stats

# D√©finir la classe d'analyse
class ComprehensiveCryptoCommoAnalyzer:
    def __init__(self, tickers, names, start_date):
        self.tickers = tickers
        self.names = names  # noms r√©els des actifs financiers
        self.start_date = start_date
        self.data = None
        self.returns = None
        self.significant_vars = []  # Pour stocker les variables significatives

    def fetch_data(self):
        """
        T√©l√©charge les donn√©es historiques pour les tickers sp√©cifi√©s.
        """
        st.markdown("### T√©l√©chargement des donn√©es historiques üìä")
        st.write("Nous collectons les donn√©es historiques des actifs sp√©cifi√©s depuis Yahoo Finance.")
        data_dict = {}
        missing_tickers = []

        for ticker, name in zip(self.tickers, self.names):
            try:
                data = yf.download(ticker, start=self.start_date)['Adj Close'].dropna()
                data_dict[ticker] = data
            except Exception as e:
                missing_tickers.append(ticker)

        if data_dict:
            self.data = pd.DataFrame(data_dict)
            self.returns = self.data.pct_change().dropna()

        if missing_tickers:
            st.error(f"Les tickers suivants n'ont pas pu √™tre t√©l√©charg√©s : {missing_tickers}")
        else:
            st.success("Toutes les donn√©es ont √©t√© t√©l√©charg√©es avec succ√®s!")

    def prepare_data(self):
        """
        Pr√©pare soigneusement les donn√©es :
        - Gestion des valeurs manquantes
        - V√©rification de la stationnarit√©
        - Transformation pour rendre les s√©ries stationnaires
        - D√©tection et gestion des outliers
        - Standardisation
        """
        st.markdown("### Pr√©paration des Donn√©es üîß")
        st.write("Nous pr√©parons maintenant les donn√©es pour les analyses suivantes, en v√©rifiant leur qualit√© et en les rendant utilisables pour les mod√®les pr√©dictifs.")
        self.handle_missing_data()
        self.check_stationarity()
        self.make_stationary()
        self.detect_outliers()
        self.scale_data()
        st.success("Pr√©paration des donn√©es termin√©e.")

    def handle_missing_data(self, method='linear'):
        """
        G√®re les valeurs manquantes dans les s√©ries temporelles.
        """
        self.data = self.data.interpolate(method=method).dropna()
        self.returns = self.data.pct_change().dropna()

    def check_stationarity(self):
        """
        Effectue un test de Dickey-Fuller Augment√© (ADF) pour v√©rifier la stationnarit√© des s√©ries temporelles.
        """
        st.write("**V√©rification de la stationnarit√© des s√©ries temporelles**")
        for column in self.data.columns:
            result = adfuller(self.data[column].dropna())
            if result[1] > 0.05:
                st.warning(f"La s√©rie pour {column} n'est pas stationnaire.")
            else:
                st.success(f"La s√©rie pour {column} est stationnaire.")

    def make_stationary(self):
        """
        Applique une diff√©renciation premi√®re pour rendre les s√©ries temporelles stationnaires.
        """
        self.returns = self.data.diff().dropna()

    def detect_outliers(self):
        """
        D√©tection des outliers dans les s√©ries temporelles via la m√©thode IQR.
        """
        st.write("**D√©tection et gestion des outliers**")
        Q1 = self.returns.quantile(0.25)
        Q3 = self.returns.quantile(0.75)
        IQR = Q3 - Q1
        outliers = (self.returns < (Q1 - 1.5 * IQR)) | (self.returns > (Q3 + 1.5 * IQR))
        st.write(f"Nombre d'outliers d√©tect√©s : {outliers.sum().sum()}")

    def scale_data(self):
        """
        Standardisation des donn√©es.
        """
        scaler = StandardScaler()
        self.returns = pd.DataFrame(scaler.fit_transform(self.returns), index=self.returns.index, columns=self.returns.columns)
        st.write("**Les donn√©es ont √©t√© standardis√©es**")

    def random_forest_model(self):
        """
        Construire un mod√®le For√™t Al√©atoire bas√© sur les meilleures d√©riv√©es et inverses des actifs, except√© Bitcoin, et afficher le R¬≤.
        """
        st.markdown("### Mod√®le For√™t Al√©atoire avec Meilleures D√©riv√©es et Inverses des Actifs üå≤")
        st.write("Nous construisons un mod√®le de For√™t Al√©atoire pour pr√©dire les rendements de Bitcoin en utilisant les meilleures d√©riv√©es et inverses des autres actifs, sans utiliser Bitcoin lui-m√™me.")

        # Pr√©paration des features : d√©riv√©es premi√®res, secondes et inverses des rendements
        best_features = {}
        for col in self.returns.columns:
            if col != 'BTC-USD':
                first_derivative = np.gradient(self.returns[col])
                second_derivative = np.gradient(first_derivative)
                inverse_returns = self.returns[col].apply(lambda x: 1/x if x != 0 else 0)

                best_features[f"Premi√®re D√©riv√©e de {col}"] = first_derivative
                best_features[f"Seconde D√©riv√©e de {col}"] = second_derivative
                best_features[f"Inverse des Rendements de {col}"] = inverse_returns

        # Cr√©er une matrice de donn√©es avec les meilleures d√©riv√©es et inverses s√©lectionn√©es
        X = pd.DataFrame(best_features, index=self.returns.index)
        y = self.returns['BTC-USD']

        # Mod√®le For√™t Al√©atoire
        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        rf_model.fit(X, y)

        # Pr√©diction
        y_pred = rf_model.predict(X)

        # Calcul du R¬≤
        r_squared = r2_score(y, y_pred)
        st.write(f"**R¬≤ du mod√®le For√™t Al√©atoire :** {r_squared:.3f}")
        if r_squared > 0.7:
            st.success("Le mod√®le explique une grande partie de la variabilit√© des rendements de Bitcoin.")
        else:
            st.warning("Le mod√®le a une capacit√© limit√©e √† expliquer la variabilit√© des rendements de Bitcoin.")

        # Importance des features
        feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)
        feature_importances = feature_importances.sort_values(ascending=False)
        st.write("### Importance des Variables dans le Mod√®le For√™t Al√©atoire")
        st.write(feature_importances.head(10))


def main():
    st.title("üí° Analyse des Relations entre Bitcoin et Autres Actifs Financiers")
    st.write("Bienvenue dans cette application d'analyse financi√®re qui explore les liens entre Bitcoin et divers autres actifs.")

    # Liste des tickers et noms r√©els des actifs financiers
    tickers = [
        'BTC-USD', 'SPY', 'QQQ', '^GDAXI', '^FTSE', 'CL=F', 'BZ=F', 'NG=F',
        'GC=F', 'SI=F', 'PL=F', 'PA=F', 'HG=F', 'ZN=F', 'ZW=F',
        'ZC=F', 'ZS=F', 'KC=F', 'CT=F', 'CC=F', 'SB=F', 'OJ=F', 'LE=F', 'HE=F',
        'RB=F', 'HO=F', 'EURUSD=X', 'GBPUSD=X', 'TLT', 'LQD', 'HYG'
    ]
    
    # Noms r√©els des actifs financiers correspondants
    names = [
        'Bitcoin (BTC)', 'S&P 500 (SPY)', 'Nasdaq 100 (QQQ)', 'DAX Allemagne (^GDAXI)', 'FTSE 100 (^FTSE)',
        'P√©trole WTI (CL=F)', 'P√©trole Brent (BZ=F)', 'Gaz Naturel (NG=F)', 'Or (GC=F)', 'Argent (SI=F)',
        'Platine (PL=F)', 'Palladium (PA=F)', 'Cuivre (HG=F)', 'Zinc (ZN=F)', 'Bl√© (ZW=F)',
        'Ma√Øs (ZC=F)', 'Soja (ZS=F)', 'Caf√© (KC=F)', 'Coton (CT=F)', 'Cacao (CC=F)', 'Sucre (SB=F)',
        'Jus d\'Orange (OJ=F)', 'B√©tail (LE=F)', 'Porcs (HE=F)', 'Essence (RB=F)', 'Fuel (HO=F)',
        'Euro-Dollar (EURUSD=X)', 'Livre Sterling-Dollar (GBPUSD=X)', 'Obligations US 20 ans (TLT)',
        'Obligations d\'entreprises (LQD)', 'Obligations √† haut rendement (HYG)'
    ]

    start_date = '2010-07-18'

    analyzer = ComprehensiveCryptoCommoAnalyzer(tickers, names, start_date)

    st.header('1. T√©l√©chargement et Pr√©paration des Donn√©es')
    analyzer.fetch_data()
    
    # Pr√©paration rigoureuse des donn√©es
    analyzer.prepare_data()

    st.header('2. Mod√®le For√™t Al√©atoire avec Variables Significatives')
    analyzer.random_forest_model()

if __name__ == "__main__":
    main()
